/// <reference path="../declares.d.ts" />
'use strict';
define(["require", "exports"], function (require, exports) {
    exports.language = {
        displayName: 'ooc',
        name: 'ooc',
        mimeTypes: [],
        defaultToken: '',
        lineComment: '//',
        blockCommentStart: '/*',
        blockCommentEnd: '*/',
        autoClosingPairs: [['{', '}'], ['[', ']'], ['(', ')'], ['"', '"']],
        keywords: [
            '__onheap__',
            'this',
            'This',
            'this',
            'virtual',
            'override',
            'break',
            'continue',
            'return',
            'func',
            'class',
            'cover',
            'enum',
            'interface',
            'from',
            'abstract',
            'final',
            'static',
            'inline',
            'extends',
            'extern',
            'unmangled',
            'implements',
            'implicit',
            'import',
            'include',
            'use',
            'if',
            'else',
            'for',
            'while',
            'match',
            'case',
            'as',
            'in',
            'into',
            'proto',
            'try',
            'catch',
            'set',
            'get',
            'operator',
            'const',
            'true',
            'false',
            'null',
            'new',
            'Float',
            'Int',
            'Double',
            'String',
            'Bool'
        ],
        operators: [
            '+',
            '+=',
            '=',
            '&',
            '&=',
            '|',
            '|=',
            '^',
            '^=',
            '<==>',
            ':=',
            ':==',
            '::=',
            '@',
            '/',
            '/=',
            '==',
            '**',
            '**=',
            '>',
            '>=',
            '<<',
            '<<=',
            '<',
            '<=',
            '&&',
            '||',
            '%',
            '*',
            '*=',
            '~',
            '!',
            '!=',
            '>>',
            '>>=',
            '-',
            '-=',
            '?',
            '??',
            '..',
            '->'
        ],
        types: [
            'Quaternion'
        ],
        // we include these common regular expressions
        symbols: /[=><!~?:&|+\-*\/\^%]+/,
        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
        integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,
        floatsuffix: /[fFlL]?/,
        // The main tokenizer for our languages
        tokenizer: {
            root: [
                [/[A-Z]+\w*/, 'type.$0'],
                //[/[a-zA-Z]+\w*\(/, 'type.$0'],
                [/[a-zA-Z_]\w*/, { cases: { '@keywords': { token: 'keyword.$0' }, '@default': 'identifier' } }],
                { include: '@whitespace' },
                [/^\s*#\w+/, 'keyword'],
                [/[{}()\[\]]/, '@brackets'],
                [/[<>](?!@symbols)/, '@brackets'],
                [/@symbols/, { cases: { '@operators': 'delimiter', '@default': '' } }],
                [/\d*\d+[eE]([\-+]?\d+)?(@floatsuffix)/, 'number.float'],
                [/\d*\.\d+([eE][\-+]?\d+)?(@floatsuffix)/, 'number.float'],
                [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],
                [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],
                [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],
                [/\d[\d']*\d(@integersuffix)/, 'number'],
                [/\d(@integersuffix)/, 'number'],
                [/[;,.]/, 'delimiter'],
                [/"([^"\\]|\\.)*$/, 'string.invalid'],
                [/"/, 'string', '@string'],
                [/'[^\\']'/, 'string'],
                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],
                [/'/, 'string.invalid']
            ],
            whitespace: [
                [/[ \t\r\n]+/, ''],
                [/\/\*\*(?!\/)/, 'comment.doc', '@doccomment'],
                [/\/\*/, 'comment', '@comment'],
                [/\/\/.*$/, 'comment'],
            ],
            comment: [
                [/[^\/*]+/, 'comment'],
                [/\/\*/, 'comment.invalid'],
                [/\*\//, 'comment', '@pop'],
                [/[\/*]/, 'comment']
            ],
            //Identical copy of comment above, except for the addition of .doc
            doccomment: [
                [/[^\/*]+/, 'comment.doc'],
                [/\/\*/, 'comment.doc.invalid'],
                [/\*\//, 'comment.doc', '@pop'],
                [/[\/*]/, 'comment.doc']
            ],
            string: [
                [/[^\\"]+/, 'string'],
                [/@escapes/, 'string.escape'],
                [/\\./, 'string.escape.invalid'],
                [/"/, 'string', '@pop']
            ],
        },
    };
});
